basePath: /api
definitions:
  exception.ExceptionError:
    properties:
      error_subcode:
        type: integer
      message:
        type: string
      type:
        $ref: '#/definitions/exception.errorType'
    type: object
  exception.ExceptionErrors:
    properties:
      errItems:
        items:
          $ref: '#/definitions/exception.ExceptionError'
        type: array
      globalMessage:
        type: string
      httpStatusCode:
        type: integer
    type: object
  exception.errorType:
    enum:
    - UnknownError
    - BadRequest
    - NotFound
    - Unauthorized
    - ValidationError
    - JobError
    - ExternalServiceError
    - DatasourceError
    type: string
    x-enum-varnames:
    - ERROR_TYPE_UNKNOWN_ERROR
    - ERROR_TYPE_BAD_REQUEST
    - ERROR_TYPE_NOT_FOUND
    - ERROR_TYPE_UNAUTHORIZED
    - ERROR_TYPE_VALIDATION_ERROR
    - ERROR_TYPE_JOB_ERROR
    - ERROR_TYPE_EXTERNAL_SERVICE_ERROR
    - ERROR_TYPE_DATASOURCE_ERROR
  model.Taxonomy:
    properties:
      code:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      deleted_at:
        type: string
      deleted_by:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      parent_id:
        type: string
      record_depth:
        type: integer
      record_left:
        type: integer
      record_right:
        type: integer
      slug:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
    type: object
  requests.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  requests.RegisterRequest:
    properties:
      confirm_password:
        type: string
      email:
        type: string
      password:
        maxLength: 32
        minLength: 8
        type: string
      phone:
        type: string
      username:
        maxLength: 32
        minLength: 3
        type: string
    required:
    - confirm_password
    - email
    - password
    - phone
    - username
    type: object
  response.CommonResponse:
    properties:
      code:
        type: integer
      data: {}
      errors:
        $ref: '#/definitions/exception.ExceptionErrors'
      message:
        type: string
      path:
        type: string
      request_id:
        type: string
    type: object
  responses.AuthResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      refresh_token:
        type: string
      token_type:
        type: string
      user:
        $ref: '#/definitions/responses.UserResponse'
    type: object
  responses.ErrorResponse:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  responses.PostResponse:
    properties:
      author_id:
        type: string
      content:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: string
      published_at:
        type: string
      slug:
        type: string
      status:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  responses.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
      status:
        type: string
    type: object
  responses.TokenResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      refresh_token:
        type: string
      token_type:
        type: string
    type: object
  responses.UserResponse:
    properties:
      email:
        type: string
      email_verified_at:
        type: string
      id:
        type: string
      phone:
        type: string
      phone_verified_at:
        type: string
      username:
        type: string
    type: object
  webapi_internal_interfaces_http_requests.ChangePasswordRequest:
    properties:
      new_password:
        type: string
      old_password:
        type: string
    type: object
  webapi_internal_interfaces_http_requests.CreatePostRequest:
    properties:
      author_id:
        type: string
      content:
        type: string
      slug:
        type: string
      status:
        type: string
      title:
        type: string
    type: object
  webapi_internal_interfaces_http_requests.CreateUserRequest:
    properties:
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      username:
        type: string
    type: object
  webapi_internal_interfaces_http_requests.ForgetPasswordRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  webapi_internal_interfaces_http_requests.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  webapi_internal_interfaces_http_requests.ResetPasswordRequest:
    properties:
      confirm_password:
        type: string
      email:
        type: string
      otp:
        type: string
      password:
        maxLength: 32
        minLength: 8
        type: string
    required:
    - confirm_password
    - email
    - otp
    - password
    type: object
  webapi_internal_interfaces_http_requests.UpdatePostRequest:
    properties:
      content:
        type: string
      slug:
        type: string
      status:
        type: string
      title:
        type: string
    type: object
  webapi_internal_interfaces_http_requests.UpdateUserRequest:
    properties:
      email:
        type: string
      phone:
        type: string
      username:
        type: string
    type: object
host: localhost:8000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A comprehensive RESTful API built with Go, Fiber, and PostgreSQL using
    Hexagonal Architecture
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Go RESTful API - Hexagonal Architecture
  version: "1.0"
paths:
  /auth/forget-password:
    post:
      consumes:
      - application/json
      description: Send a password reset email with OTP
      parameters:
      - description: Password reset request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/webapi_internal_interfaces_http_requests.ForgetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset email sent
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad request - Invalid input data
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Request password reset
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user with username and password
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/requests.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/responses.AuthResponse'
              type: object
        "400":
          description: Bad request - Invalid input data
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized - Invalid credentials
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: User login
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout user (client should discard tokens)
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: User logout
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh an access token using a refresh token
      parameters:
      - description: Refresh token request
        in: body
        name: token
        required: true
        schema:
          $ref: '#/definitions/webapi_internal_interfaces_http_requests.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Token refreshed successfully
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/responses.TokenResponse'
              type: object
        "400":
          description: Bad request - Invalid input data
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized - Invalid refresh token
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Refresh access token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user account with the provided information
      parameters:
      - description: User registration request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/requests.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/responses.AuthResponse'
              type: object
        "400":
          description: Bad request - Invalid input data
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "409":
          description: Conflict - User already exists
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Reset password using email and OTP
      parameters:
      - description: Password reset with OTP request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/webapi_internal_interfaces_http_requests.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset successful
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad request - Invalid input data
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized - Invalid OTP
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Reset password with OTP
      tags:
      - auth
  /healthz:
    get:
      consumes:
      - application/json
      description: Check if the API is running and healthy
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CommonResponse'
      summary: Health check endpoint
      tags:
      - health
  /media:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all media files with pagination
      parameters:
      - default: 10
        description: 'Number of media items to return (default: 10, max: 100)'
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - default: 0
        description: 'Number of media items to skip (default: 0)'
        in: query
        minimum: 0
        name: offset
        type: integer
      - description: Search query to filter media by name or filename
        in: query
        name: query
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of media files
          schema:
            allOf:
            - $ref: '#/definitions/response.CommonResponse'
            - properties:
                data:
                  items: {}
                  type: array
              type: object
        "400":
          description: Bad request - Invalid parameters
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.CommonResponse'
      security:
      - BearerAuth: []
      summary: Get all media
      tags:
      - media
    post:
      consumes:
      - multipart/form-data
      description: Upload a new media file to the system
      parameters:
      - description: Media file to upload
        in: formData
        name: file
        required: true
        type: file
      - description: Custom name for the media file
        in: formData
        name: name
        type: string
      - description: Description of the media file
        in: formData
        name: description
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Media uploaded successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.CommonResponse'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "400":
          description: Bad request - Invalid file or parameters
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "413":
          description: Payload too large - File size exceeds limit
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "415":
          description: Unsupported media type
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.CommonResponse'
      security:
      - BearerAuth: []
      summary: Upload media
      tags:
      - media
  /media/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a media file from the system
      parameters:
      - description: Media ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Media deleted successfully
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "400":
          description: Bad request - Invalid media ID
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "404":
          description: Not found - Media does not exist
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.CommonResponse'
      security:
      - BearerAuth: []
      summary: Delete media
      tags:
      - media
    get:
      consumes:
      - application/json
      description: Retrieve a specific media file by its unique identifier
      parameters:
      - description: Media ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Media file details
          schema:
            allOf:
            - $ref: '#/definitions/response.CommonResponse'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "400":
          description: Bad request - Invalid media ID
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "404":
          description: Not found - Media does not exist
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.CommonResponse'
      security:
      - BearerAuth: []
      summary: Get media by ID
      tags:
      - media
    put:
      consumes:
      - application/json
      description: Update media file metadata (name, description, etc.)
      parameters:
      - description: Media ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Media update request
        in: body
        name: media
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Media updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.CommonResponse'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "400":
          description: Bad request - Invalid input data
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "404":
          description: Not found - Media does not exist
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.CommonResponse'
      security:
      - BearerAuth: []
      summary: Update media
      tags:
      - media
  /menus:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of menus with optional filtering
      parameters:
      - default: 10
        description: 'Number of menus to return (default: 10, max: 100)'
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - default: 0
        description: 'Number of menus to skip (default: 0)'
        in: query
        minimum: 0
        name: offset
        type: integer
      - description: Filter by active status (true/false)
        enum:
        - "true"
        - "false"
        in: query
        name: active
        type: string
      - description: Filter by visible status (true/false)
        enum:
        - "true"
        - "false"
        in: query
        name: visible
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of menus
          schema:
            allOf:
            - $ref: '#/definitions/response.CommonResponse'
            - properties:
                data:
                  items: {}
                  type: array
              type: object
        "400":
          description: Bad request - Invalid parameters
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.CommonResponse'
      security:
      - BearerAuth: []
      summary: Get all menus
      tags:
      - menus
    post:
      consumes:
      - application/json
      description: Create a new menu item with the provided information
      parameters:
      - description: Menu creation request
        in: body
        name: menu
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Menu created successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.CommonResponse'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "400":
          description: Bad request - Invalid input data
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "409":
          description: Conflict - Menu with same slug already exists
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.CommonResponse'
      security:
      - BearerAuth: []
      summary: Create a new menu
      tags:
      - menus
  /menus/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a menu item (soft delete)
      parameters:
      - description: Menu ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Menu deleted successfully
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "400":
          description: Bad request - Invalid menu ID
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "404":
          description: Not found - Menu does not exist
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.CommonResponse'
      security:
      - BearerAuth: []
      summary: Delete menu
      tags:
      - menus
    get:
      consumes:
      - application/json
      description: Retrieve a specific menu by its unique identifier
      parameters:
      - description: Menu ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Menu details
          schema:
            allOf:
            - $ref: '#/definitions/response.CommonResponse'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "400":
          description: Bad request - Invalid menu ID
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "404":
          description: Not found - Menu does not exist
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.CommonResponse'
      security:
      - BearerAuth: []
      summary: Get menu by ID
      tags:
      - menus
    put:
      consumes:
      - application/json
      description: Update an existing menu's information
      parameters:
      - description: Menu ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Menu update request
        in: body
        name: menu
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Menu updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.CommonResponse'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "400":
          description: Bad request - Invalid input data
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "404":
          description: Not found - Menu does not exist
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.CommonResponse'
      security:
      - BearerAuth: []
      summary: Update menu
      tags:
      - menus
  /menus/{id}/activate:
    patch:
      consumes:
      - application/json
      description: Activate a deactivated menu item
      parameters:
      - description: Menu ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Menu activated successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.CommonResponse'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "400":
          description: Bad request - Invalid menu ID
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "404":
          description: Not found - Menu does not exist
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.CommonResponse'
      security:
      - BearerAuth: []
      summary: Activate menu
      tags:
      - menus
  /menus/{id}/deactivate:
    patch:
      consumes:
      - application/json
      description: Deactivate an active menu item
      parameters:
      - description: Menu ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Menu deactivated successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.CommonResponse'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "400":
          description: Bad request - Invalid menu ID
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "404":
          description: Not found - Menu does not exist
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.CommonResponse'
      security:
      - BearerAuth: []
      summary: Deactivate menu
      tags:
      - menus
  /menus/{id}/hide:
    patch:
      consumes:
      - application/json
      description: Make a visible menu item hidden
      parameters:
      - description: Menu ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Menu hidden successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.CommonResponse'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "400":
          description: Bad request - Invalid menu ID
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "404":
          description: Not found - Menu does not exist
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.CommonResponse'
      security:
      - BearerAuth: []
      summary: Hide menu
      tags:
      - menus
  /menus/{id}/show:
    patch:
      consumes:
      - application/json
      description: Make a hidden menu item visible
      parameters:
      - description: Menu ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Menu shown successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.CommonResponse'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "400":
          description: Bad request - Invalid menu ID
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "404":
          description: Not found - Menu does not exist
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.CommonResponse'
      security:
      - BearerAuth: []
      summary: Show menu
      tags:
      - menus
  /menus/hierarchy:
    get:
      consumes:
      - application/json
      description: Retrieve the complete menu hierarchy with nested structure
      produces:
      - application/json
      responses:
        "200":
          description: Menu hierarchy
          schema:
            allOf:
            - $ref: '#/definitions/response.CommonResponse'
            - properties:
                data:
                  items: {}
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.CommonResponse'
      security:
      - BearerAuth: []
      summary: Get menu hierarchy
      tags:
      - menus
  /menus/root:
    get:
      consumes:
      - application/json
      description: Retrieve all root-level menus (top-level menu items)
      produces:
      - application/json
      responses:
        "200":
          description: List of root menus
          schema:
            allOf:
            - $ref: '#/definitions/response.CommonResponse'
            - properties:
                data:
                  items: {}
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.CommonResponse'
      security:
      - BearerAuth: []
      summary: Get root menus
      tags:
      - menus
  /menus/search:
    get:
      consumes:
      - application/json
      description: Search menus by name or description
      parameters:
      - description: Search query
        in: query
        name: q
        required: true
        type: string
      - default: 10
        description: 'Number of menus to return (default: 10, max: 100)'
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - default: 0
        description: 'Number of menus to skip (default: 0)'
        in: query
        minimum: 0
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of matching menus
          schema:
            allOf:
            - $ref: '#/definitions/response.CommonResponse'
            - properties:
                data:
                  items: {}
                  type: array
              type: object
        "400":
          description: Bad request - Search query is required
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.CommonResponse'
      security:
      - BearerAuth: []
      summary: Search menus
      tags:
      - menus
  /menus/slug/{slug}:
    get:
      consumes:
      - application/json
      description: Retrieve a menu by its URL-friendly slug
      parameters:
      - description: Menu slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Menu details
          schema:
            allOf:
            - $ref: '#/definitions/response.CommonResponse'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "400":
          description: Bad request - Slug is required
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "404":
          description: Not found - Menu does not exist
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.CommonResponse'
      security:
      - BearerAuth: []
      summary: Get menu by slug
      tags:
      - menus
  /posts:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of posts with optional search and status
        filtering
      parameters:
      - default: 10
        description: 'Number of posts to return (default: 10, max: 100)'
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - default: 0
        description: 'Number of posts to skip (default: 0)'
        in: query
        minimum: 0
        name: offset
        type: integer
      - description: Search query to filter posts by title or content
        in: query
        name: query
        type: string
      - description: Filter posts by status (published, draft, etc.)
        enum:
        - published
        - draft
        - archived
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of posts
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/responses.PostResponse'
                  type: array
              type: object
        "400":
          description: Bad request - Invalid parameters
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get all posts
      tags:
      - posts
    post:
      consumes:
      - application/json
      description: Create a new blog post with the provided information
      parameters:
      - description: Post creation request
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/webapi_internal_interfaces_http_requests.CreatePostRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Post created successfully
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/responses.PostResponse'
              type: object
        "400":
          description: Bad request - Invalid input data
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "409":
          description: Conflict - Post with same slug already exists
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new post
      tags:
      - posts
  /posts/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a post (soft delete)
      parameters:
      - description: Post ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Post deleted successfully
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad request - Invalid post ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not found - Post does not exist
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete post
      tags:
      - posts
    get:
      consumes:
      - application/json
      description: Retrieve a post by its unique identifier
      parameters:
      - description: Post ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Post found
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/responses.PostResponse'
              type: object
        "400":
          description: Bad request - Invalid post ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not found - Post does not exist
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get post by ID
      tags:
      - posts
    put:
      consumes:
      - application/json
      description: Update an existing post's information
      parameters:
      - description: Post ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Post update request
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/webapi_internal_interfaces_http_requests.UpdatePostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Post updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/responses.PostResponse'
              type: object
        "400":
          description: Bad request - Invalid input data
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not found - Post does not exist
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update post
      tags:
      - posts
  /posts/{id}/publish:
    put:
      consumes:
      - application/json
      description: Publish a draft post to make it publicly visible
      parameters:
      - description: Post ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Post published successfully
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/responses.PostResponse'
              type: object
        "400":
          description: Bad request - Invalid post ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not found - Post does not exist
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Publish post
      tags:
      - posts
  /posts/{id}/unpublish:
    put:
      consumes:
      - application/json
      description: Unpublish a post to make it a draft (not publicly visible)
      parameters:
      - description: Post ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Post unpublished successfully
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/responses.PostResponse'
              type: object
        "400":
          description: Bad request - Invalid post ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not found - Post does not exist
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Unpublish post
      tags:
      - posts
  /posts/author/{authorID}:
    get:
      consumes:
      - application/json
      description: Retrieve all posts written by a specific author
      parameters:
      - description: Author ID
        format: uuid
        in: path
        name: authorID
        required: true
        type: string
      - default: 10
        description: 'Number of posts to return (default: 10, max: 100)'
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - default: 0
        description: 'Number of posts to skip (default: 0)'
        in: query
        minimum: 0
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of posts by author
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/responses.PostResponse'
                  type: array
              type: object
        "400":
          description: Bad request - Invalid author ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not found - Author does not exist
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get posts by author
      tags:
      - posts
  /posts/slug/{slug}:
    get:
      consumes:
      - application/json
      description: Retrieve a post by its URL-friendly slug
      parameters:
      - description: Post slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Post found
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/responses.PostResponse'
              type: object
        "400":
          description: Bad request - Slug is required
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not found - Post does not exist
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get post by slug
      tags:
      - posts
  /roles:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of roles with optional filtering
      parameters:
      - default: 10
        description: 'Number of roles to return (default: 10, max: 100)'
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - default: 0
        description: 'Number of roles to skip (default: 0)'
        in: query
        minimum: 0
        name: offset
        type: integer
      - description: Filter by active status (true/false)
        enum:
        - "true"
        - "false"
        in: query
        name: active
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of roles
          schema:
            allOf:
            - $ref: '#/definitions/response.CommonResponse'
            - properties:
                data:
                  items: {}
                  type: array
              type: object
        "400":
          description: Bad request - Invalid parameters
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.CommonResponse'
      security:
      - BearerAuth: []
      summary: Get all roles
      tags:
      - roles
    post:
      consumes:
      - application/json
      description: Create a new role with the provided information
      parameters:
      - description: Role creation request
        in: body
        name: role
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Role created successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.CommonResponse'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "400":
          description: Bad request - Invalid input data
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "409":
          description: Conflict - Role with same slug already exists
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.CommonResponse'
      security:
      - BearerAuth: []
      summary: Create a new role
      tags:
      - roles
  /roles/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a role (soft delete)
      parameters:
      - description: Role ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Role deleted successfully
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "400":
          description: Bad request - Invalid role ID
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "404":
          description: Not found - Role does not exist
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.CommonResponse'
      security:
      - BearerAuth: []
      summary: Delete role
      tags:
      - roles
    get:
      consumes:
      - application/json
      description: Retrieve a specific role by its unique identifier
      parameters:
      - description: Role ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Role details
          schema:
            allOf:
            - $ref: '#/definitions/response.CommonResponse'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "400":
          description: Bad request - Invalid role ID
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "404":
          description: Not found - Role does not exist
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.CommonResponse'
      security:
      - BearerAuth: []
      summary: Get role by ID
      tags:
      - roles
    put:
      consumes:
      - application/json
      description: Update an existing role's information
      parameters:
      - description: Role ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Role update request
        in: body
        name: role
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Role updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.CommonResponse'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "400":
          description: Bad request - Invalid input data
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "404":
          description: Not found - Role does not exist
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.CommonResponse'
      security:
      - BearerAuth: []
      summary: Update role
      tags:
      - roles
  /roles/{id}/activate:
    put:
      consumes:
      - application/json
      description: Activate a deactivated role
      parameters:
      - description: Role ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Role activated successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.CommonResponse'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "400":
          description: Bad request - Invalid role ID
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "404":
          description: Not found - Role does not exist
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.CommonResponse'
      security:
      - BearerAuth: []
      summary: Activate role
      tags:
      - roles
  /roles/{id}/deactivate:
    put:
      consumes:
      - application/json
      description: Deactivate an active role
      parameters:
      - description: Role ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Role deactivated successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.CommonResponse'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "400":
          description: Bad request - Invalid role ID
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "404":
          description: Not found - Role does not exist
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.CommonResponse'
      security:
      - BearerAuth: []
      summary: Deactivate role
      tags:
      - roles
  /roles/search:
    get:
      consumes:
      - application/json
      description: Search roles by name or description
      parameters:
      - description: Search query
        in: query
        name: query
        required: true
        type: string
      - default: 10
        description: 'Number of roles to return (default: 10, max: 100)'
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - default: 0
        description: 'Number of roles to skip (default: 0)'
        in: query
        minimum: 0
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of matching roles
          schema:
            allOf:
            - $ref: '#/definitions/response.CommonResponse'
            - properties:
                data:
                  items: {}
                  type: array
              type: object
        "400":
          description: Bad request - Invalid parameters
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.CommonResponse'
      security:
      - BearerAuth: []
      summary: Search roles
      tags:
      - roles
  /roles/slug/{slug}:
    get:
      consumes:
      - application/json
      description: Retrieve a role by its URL-friendly slug
      parameters:
      - description: Role slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Role details
          schema:
            allOf:
            - $ref: '#/definitions/response.CommonResponse'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "400":
          description: Bad request - Slug is required
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "404":
          description: Not found - Role does not exist
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.CommonResponse'
      security:
      - BearerAuth: []
      summary: Get role by slug
      tags:
      - roles
  /users:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of users with optional search and filtering
      parameters:
      - default: 10
        description: 'Number of users to return (default: 10, max: 100)'
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - default: 0
        description: 'Number of users to skip (default: 0)'
        in: query
        minimum: 0
        name: offset
        type: integer
      - description: Search query to filter users by username, email, or phone
        in: query
        name: query
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/responses.UserResponse'
                  type: array
              type: object
        "400":
          description: Bad request - Invalid parameters
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user account with the provided information
      parameters:
      - description: User creation request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/webapi_internal_interfaces_http_requests.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/responses.UserResponse'
              type: object
        "400":
          description: Bad request - Invalid input data
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "409":
          description: Conflict - User already exists
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user account (soft delete)
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad request - Invalid user ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not found - User does not exist
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Retrieve a user by their unique identifier
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User found
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/responses.UserResponse'
              type: object
        "400":
          description: Bad request - Invalid user ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not found - User does not exist
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update an existing user's information
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: User update request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/webapi_internal_interfaces_http_requests.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/responses.UserResponse'
              type: object
        "400":
          description: Bad request - Invalid input data
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not found - User does not exist
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - users
  /users/{id}/password:
    put:
      consumes:
      - application/json
      description: Change a user's password with old password verification
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Password change request
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/webapi_internal_interfaces_http_requests.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad request - Invalid input data
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized - Invalid old password
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not found - User does not exist
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - users
  /users/{user_id}/menus:
    get:
      consumes:
      - application/json
      description: Retrieve all menus accessible to a specific user based on their
        roles
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of user menus
          schema:
            allOf:
            - $ref: '#/definitions/response.CommonResponse'
            - properties:
                data:
                  items: {}
                  type: array
              type: object
        "400":
          description: Bad request - Invalid user ID
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "404":
          description: Not found - User does not exist
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.CommonResponse'
      security:
      - BearerAuth: []
      summary: Get user menus
      tags:
      - menus
  /v1/taxonomies:
    get:
      description: Get all taxonomies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CommonResponse'
      summary: Get all taxonomies
      tags:
      - taxonomies
    post:
      consumes:
      - application/json
      description: Create a new taxonomy
      parameters:
      - description: Taxonomy info
        in: body
        name: taxonomy
        required: true
        schema:
          $ref: '#/definitions/model.Taxonomy'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.CommonResponse'
      summary: Create taxonomy
      tags:
      - taxonomies
  /v1/taxonomies/{id}:
    delete:
      description: Delete a taxonomy by its ID
      parameters:
      - description: Taxonomy UUID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.CommonResponse'
      summary: Delete taxonomy
      tags:
      - taxonomies
    get:
      description: Get a taxonomy by its ID
      parameters:
      - description: Taxonomy UUID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.CommonResponse'
      summary: Get taxonomy by ID
      tags:
      - taxonomies
    put:
      consumes:
      - application/json
      description: Update a taxonomy by its ID
      parameters:
      - description: Taxonomy UUID
        in: path
        name: id
        required: true
        type: string
      - description: Taxonomy info
        in: body
        name: taxonomy
        required: true
        schema:
          $ref: '#/definitions/model.Taxonomy'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.CommonResponse'
      summary: Update taxonomy
      tags:
      - taxonomies
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
