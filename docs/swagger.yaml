basePath: /api/v1
definitions:
  controllers.AddPolicyRequest:
    properties:
      action:
        type: string
      object:
        type: string
      subject:
        type: string
    type: object
  controllers.HealthCheck:
    properties:
      message:
        type: string
      service:
        type: string
      status:
        type: string
      timestamp:
        type: string
    type: object
  controllers.HealthResponse:
    properties:
      environment:
        type: string
      services:
        items:
          $ref: '#/definitions/controllers.HealthCheck'
        type: array
      status:
        type: string
      timestamp:
        type: string
      version:
        type: string
    type: object
  controllers.RemovePolicyRequest:
    properties:
      action:
        type: string
      object:
        type: string
      subject:
        type: string
    type: object
  entities.Address:
    properties:
      address_line1:
        type: string
      address_line2:
        type: string
      address_type:
        $ref: '#/definitions/entities.AddressType'
      addressable_id:
        type: string
      addressable_type:
        $ref: '#/definitions/entities.AddressableType'
      city:
        type: string
      country:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: string
      is_primary:
        type: boolean
      latitude:
        type: number
      longitude:
        type: number
      postal_code:
        type: string
      state:
        type: string
      updated_at:
        type: string
    type: object
  entities.AddressType:
    enum:
    - home
    - work
    - billing
    - shipping
    - other
    type: string
    x-enum-varnames:
    - AddressTypeHome
    - AddressTypeWork
    - AddressTypeBilling
    - AddressTypeShipping
    - AddressTypeOther
  entities.AddressableType:
    enum:
    - user
    - organization
    type: string
    x-enum-varnames:
    - AddressableTypeUser
    - AddressableTypeOrganization
  entities.Role:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      name:
        type: string
      slug:
        type: string
      updated_at:
        type: string
    type: object
  entities.Taxonomy:
    properties:
      children:
        items:
          $ref: '#/definitions/entities.Taxonomy'
        type: array
      code:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      parent:
        allOf:
        - $ref: '#/definitions/entities.Taxonomy'
        description: Relationships
      parent_id:
        type: string
      record_depth:
        type: integer
      record_left:
        type: integer
      record_right:
        type: integer
      slug:
        type: string
      updated_at:
        type: string
    type: object
  entities.User:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      email_verified_at:
        type: string
      id:
        type: string
      phone:
        type: string
      phone_verified_at:
        type: string
      roles:
        items:
          $ref: '#/definitions/entities.Role'
        type: array
      updated_at:
        type: string
      username:
        type: string
    type: object
  pagination.PaginationResponse:
    properties:
      current_page:
        type: integer
      from:
        type: integer
      has_next_page:
        type: boolean
      has_prev_page:
        type: boolean
      next_page:
        type: integer
      per_page:
        type: integer
      previous_page:
        type: integer
      to:
        type: integer
      total_items:
        type: integer
      total_pages:
        type: integer
    type: object
  pagination.TaxonomyDTO:
    properties:
      children:
        items:
          $ref: '#/definitions/pagination.TaxonomyDTO'
        type: array
      code:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      parent:
        allOf:
        - $ref: '#/definitions/pagination.TaxonomyDTO'
        description: Relationships
      parent_id:
        type: string
      record_depth:
        type: integer
      record_left:
        type: integer
      record_right:
        type: integer
      slug:
        type: string
      updated_at:
        type: string
    type: object
  pagination.TaxonomySearchResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/pagination.TaxonomyDTO'
        type: array
      pagination:
        $ref: '#/definitions/pagination.PaginationResponse'
    type: object
  requests.ChangePasswordRequest:
    properties:
      new_password:
        type: string
      old_password:
        type: string
    type: object
  requests.CreateAddressRequest:
    properties:
      address_line1:
        maxLength: 255
        minLength: 1
        type: string
      address_line2:
        maxLength: 255
        type: string
      address_type:
        enum:
        - home
        - work
        - billing
        - shipping
        - other
        type: string
      addressable_id:
        type: string
      addressable_type:
        enum:
        - user
        - organization
        type: string
      city:
        maxLength: 255
        minLength: 1
        type: string
      country:
        maxLength: 255
        minLength: 1
        type: string
      is_primary:
        type: boolean
      latitude:
        maximum: 90
        minimum: -90
        type: number
      longitude:
        maximum: 180
        minimum: -180
        type: number
      postal_code:
        maxLength: 20
        minLength: 1
        type: string
      state:
        maxLength: 255
        minLength: 1
        type: string
    required:
    - address_line1
    - address_type
    - addressable_id
    - addressable_type
    - city
    - country
    - postal_code
    - state
    type: object
  requests.CreateCommentRequest:
    properties:
      content:
        maxLength: 1000
        minLength: 1
        type: string
      parent_id:
        type: string
      post_id:
        type: string
    required:
    - content
    - post_id
    type: object
  requests.CreateOrganizationRequest:
    properties:
      address:
        maxLength: 500
        type: string
      code:
        maxLength: 50
        type: string
      description:
        maxLength: 1000
        type: string
      email:
        maxLength: 255
        type: string
      logo_url:
        maxLength: 500
        type: string
      name:
        maxLength: 255
        minLength: 1
        type: string
      parent_id:
        type: string
      phone:
        maxLength: 50
        type: string
      website:
        maxLength: 255
        type: string
    required:
    - name
    type: object
  requests.CreatePostRequest:
    properties:
      author_id:
        type: string
      content:
        type: string
      slug:
        type: string
      status:
        type: string
      title:
        type: string
    type: object
  requests.CreateTagRequest:
    properties:
      color:
        type: string
      description:
        type: string
      name:
        type: string
      slug:
        type: string
    type: object
  requests.CreateTaxonomyRequest:
    properties:
      code:
        maxLength: 50
        type: string
      description:
        maxLength: 1000
        type: string
      name:
        maxLength: 255
        minLength: 1
        type: string
      parent_id:
        type: string
      slug:
        maxLength: 255
        minLength: 1
        type: string
    required:
    - name
    - slug
    type: object
  requests.CreateUserRequest:
    properties:
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      username:
        type: string
    type: object
  requests.ForgetPasswordRequest:
    properties:
      identifier:
        description: Can be username, email, or phone
        type: string
    required:
    - identifier
    type: object
  requests.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  requests.MoveOrganizationRequest:
    properties:
      new_parent_id:
        type: string
    required:
    - new_parent_id
    type: object
  requests.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  requests.RegisterRequest:
    properties:
      confirm_password:
        type: string
      email:
        type: string
      password:
        maxLength: 32
        minLength: 8
        type: string
      phone:
        type: string
      username:
        maxLength: 32
        minLength: 3
        type: string
    required:
    - confirm_password
    - email
    - password
    - phone
    - username
    type: object
  requests.ResetPasswordRequest:
    properties:
      confirm_password:
        type: string
      email:
        type: string
      otp:
        type: string
      password:
        maxLength: 32
        minLength: 8
        type: string
    required:
    - confirm_password
    - email
    - otp
    - password
    type: object
  requests.SetAddressTypeRequest:
    properties:
      address_type:
        enum:
        - home
        - work
        - billing
        - shipping
        - other
        type: string
    required:
    - address_type
    type: object
  requests.SetOrganizationStatusRequest:
    properties:
      status:
        enum:
        - active
        - inactive
        - suspended
        type: string
    required:
    - status
    type: object
  requests.SetPrimaryAddressRequest:
    properties:
      addressable_id:
        type: string
      addressable_type:
        enum:
        - user
        - organization
        type: string
    required:
    - addressable_id
    - addressable_type
    type: object
  requests.UpdateAddressRequest:
    properties:
      address_line1:
        maxLength: 255
        minLength: 1
        type: string
      address_line2:
        maxLength: 255
        type: string
      address_type:
        enum:
        - home
        - work
        - billing
        - shipping
        - other
        type: string
      city:
        maxLength: 255
        minLength: 1
        type: string
      country:
        maxLength: 255
        minLength: 1
        type: string
      is_primary:
        type: boolean
      latitude:
        maximum: 90
        minimum: -90
        type: number
      longitude:
        maximum: 180
        minimum: -180
        type: number
      postal_code:
        maxLength: 20
        minLength: 1
        type: string
      state:
        maxLength: 255
        minLength: 1
        type: string
    type: object
  requests.UpdateCommentRequest:
    properties:
      content:
        maxLength: 1000
        minLength: 1
        type: string
    required:
    - content
    type: object
  requests.UpdateOrganizationRequest:
    properties:
      address:
        maxLength: 500
        type: string
      code:
        maxLength: 50
        type: string
      description:
        maxLength: 1000
        type: string
      email:
        maxLength: 255
        type: string
      logo_url:
        maxLength: 500
        type: string
      name:
        maxLength: 255
        minLength: 1
        type: string
      phone:
        maxLength: 50
        type: string
      website:
        maxLength: 255
        type: string
    type: object
  requests.UpdatePostRequest:
    properties:
      content:
        type: string
      slug:
        type: string
      status:
        type: string
      title:
        type: string
    type: object
  requests.UpdateTagRequest:
    properties:
      color:
        type: string
      description:
        type: string
      name:
        type: string
      slug:
        type: string
    type: object
  requests.UpdateTaxonomyRequest:
    properties:
      code:
        maxLength: 50
        type: string
      description:
        maxLength: 1000
        type: string
      name:
        maxLength: 255
        minLength: 1
        type: string
      parent_id:
        type: string
      slug:
        maxLength: 255
        minLength: 1
        type: string
    type: object
  requests.UpdateUserRequest:
    properties:
      email:
        type: string
      phone:
        type: string
      username:
        type: string
    type: object
  responses.AuthResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      refresh_token:
        type: string
      token_type:
        type: string
      user:
        $ref: '#/definitions/responses.UserResponse'
    type: object
  responses.CommonResponse:
    properties:
      data: {}
      errors: {}
      request_id:
        type: string
      response_code:
        type: integer
      response_message:
        type: string
    type: object
  responses.ErrorResponse:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  responses.PostResponse:
    properties:
      author_id:
        type: string
      content:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: string
      published_at:
        type: string
      slug:
        type: string
      status:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  responses.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
      status:
        type: string
    type: object
  responses.TokenResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      refresh_token:
        type: string
      token_type:
        type: string
    type: object
  responses.UserResponse:
    properties:
      email:
        type: string
      email_verified_at:
        type: string
      id:
        type: string
      phone:
        type: string
      phone_verified_at:
        type: string
      username:
        type: string
    type: object
host: localhost:8000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A comprehensive RESTful API built with Go, Fiber, and PostgreSQL using
    Hexagonal Architecture
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Go RESTful API - Hexagonal Architecture
  version: "1.0"
paths:
  /api/v1/addressables/{addressable_type}/{addressable_id}/addresses:
    get:
      consumes:
      - application/json
      description: Retrieve all addresses for a specific user or organization
      parameters:
      - description: Addressable entity ID
        format: uuid
        in: path
        name: addressable_id
        required: true
        type: string
      - description: Addressable entity type
        enum:
        - user
        - organization
        in: path
        name: addressable_type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Addresses found
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entities.Address'
                  type: array
              type: object
        "400":
          description: Bad request - Invalid parameters
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get addresses by addressable entity
      tags:
      - addresses
  /api/v1/addressables/{addressable_type}/{addressable_id}/addresses/primary:
    get:
      consumes:
      - application/json
      description: Retrieve the primary address for a specific user or organization
      parameters:
      - description: Addressable entity ID
        format: uuid
        in: path
        name: addressable_id
        required: true
        type: string
      - description: Addressable entity type
        enum:
        - user
        - organization
        in: path
        name: addressable_type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Primary address found
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/entities.Address'
              type: object
        "400":
          description: Bad request - Invalid parameters
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Primary address not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get primary address by addressable entity
      tags:
      - addresses
  /api/v1/addressables/{addressable_type}/{addressable_id}/addresses/type/{address_type}:
    get:
      consumes:
      - application/json
      description: Retrieve addresses for a specific user or organization filtered
        by address type
      parameters:
      - description: Addressable entity ID
        format: uuid
        in: path
        name: addressable_id
        required: true
        type: string
      - description: Addressable entity type
        enum:
        - user
        - organization
        in: path
        name: addressable_type
        required: true
        type: string
      - description: Address type
        enum:
        - home
        - work
        - billing
        - shipping
        - other
        in: path
        name: address_type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Addresses found
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entities.Address'
                  type: array
              type: object
        "400":
          description: Bad request - Invalid parameters
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get addresses by addressable entity and type
      tags:
      - addresses
  /api/v1/addresses:
    post:
      consumes:
      - application/json
      description: Create a new address for a user or organization
      parameters:
      - description: Address creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.CreateAddressRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Address created successfully
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/entities.Address'
              type: object
        "400":
          description: Bad request - Invalid input data
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new address
      tags:
      - addresses
  /api/v1/addresses/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an address by its ID
      parameters:
      - description: Address ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Address deleted successfully
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad request - Invalid address ID format
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete an address
      tags:
      - addresses
    get:
      consumes:
      - application/json
      description: Retrieve an address by its unique identifier
      parameters:
      - description: Address ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Address found
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/entities.Address'
              type: object
        "400":
          description: Bad request - Invalid address ID format
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Address not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get address by ID
      tags:
      - addresses
    put:
      consumes:
      - application/json
      description: Update an existing address by ID
      parameters:
      - description: Address ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Address update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateAddressRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Address updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/entities.Address'
              type: object
        "400":
          description: Bad request - Invalid input data
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Address not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update an address
      tags:
      - addresses
  /api/v1/addresses/{id}/primary:
    put:
      consumes:
      - application/json
      description: Set a specific address as the primary address for an addressable
        entity
      parameters:
      - description: Address ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Set primary address request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.SetPrimaryAddressRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Address set as primary successfully
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad request - Invalid input data
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Set address as primary
      tags:
      - addresses
  /api/v1/addresses/{id}/type:
    put:
      consumes:
      - application/json
      description: Update the type of an address
      parameters:
      - description: Address ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Set address type request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.SetAddressTypeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Address type updated successfully
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad request - Invalid input data
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Set address type
      tags:
      - addresses
  /api/v1/addresses/search/city:
    get:
      consumes:
      - application/json
      description: Search for addresses in a specific city with pagination
      parameters:
      - description: City name to search for
        in: query
        name: city
        required: true
        type: string
      - default: 10
        description: 'Number of results to return (default: 10)'
        in: query
        name: limit
        type: integer
      - default: 0
        description: 'Number of results to skip (default: 0)'
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Addresses found
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entities.Address'
                  type: array
              type: object
        "400":
          description: Bad request - Invalid parameters
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Search addresses by city
      tags:
      - addresses
  /api/v1/addresses/search/country:
    get:
      consumes:
      - application/json
      description: Search for addresses in a specific country with pagination
      parameters:
      - description: Country name to search for
        in: query
        name: country
        required: true
        type: string
      - default: 10
        description: 'Number of results to return (default: 10)'
        in: query
        name: limit
        type: integer
      - default: 0
        description: 'Number of results to skip (default: 0)'
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Addresses found
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entities.Address'
                  type: array
              type: object
        "400":
          description: Bad request - Invalid parameters
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Search addresses by country
      tags:
      - addresses
  /api/v1/addresses/search/postal-code:
    get:
      consumes:
      - application/json
      description: Search for addresses with a specific postal code with pagination
      parameters:
      - description: Postal code to search for
        in: query
        name: postal_code
        required: true
        type: string
      - default: 10
        description: 'Number of results to return (default: 10)'
        in: query
        name: limit
        type: integer
      - default: 0
        description: 'Number of results to skip (default: 0)'
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Addresses found
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entities.Address'
                  type: array
              type: object
        "400":
          description: Bad request - Invalid parameters
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Search addresses by postal code
      tags:
      - addresses
  /api/v1/addresses/search/state:
    get:
      consumes:
      - application/json
      description: Search for addresses in a specific state with pagination
      parameters:
      - description: State name to search for
        in: query
        name: state
        required: true
        type: string
      - default: 10
        description: 'Number of results to return (default: 10)'
        in: query
        name: limit
        type: integer
      - default: 0
        description: 'Number of results to skip (default: 0)'
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Addresses found
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entities.Address'
                  type: array
              type: object
        "400":
          description: Bad request - Invalid parameters
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Search addresses by state
      tags:
      - addresses
  /api/v1/roles/{role_id}/users:
    get:
      consumes:
      - application/json
      description: Retrieve all users assigned to a specific role with pagination
      parameters:
      - description: Role ID
        format: uuid
        in: path
        name: role_id
        required: true
        type: string
      - default: 10
        description: 'Number of results to return (default: 10)'
        in: query
        name: limit
        type: integer
      - default: 0
        description: 'Number of results to skip (default: 0)'
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Role users retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/responses.CommonResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entities.User'
                  type: array
              type: object
        "400":
          description: Bad request - Invalid role ID
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      security:
      - BearerAuth: []
      summary: Get role users
      tags:
      - Authentication & Authorization
  /api/v1/roles/{role_id}/users/count:
    get:
      consumes:
      - application/json
      description: Get the total number of users assigned to a specific role
      parameters:
      - description: Role ID
        format: uuid
        in: path
        name: role_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User count for role retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/responses.CommonResponse'
            - properties:
                data:
                  properties:
                    count:
                      type: integer
                  type: object
              type: object
        "400":
          description: Bad request - Invalid role ID
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      security:
      - BearerAuth: []
      summary: Get user count for role
      tags:
      - Authentication & Authorization
  /api/v1/taxonomies:
    get:
      consumes:
      - application/json
      description: Retrieve all taxonomies with pagination
      parameters:
      - default: 10
        description: 'Number of results to return (default: 10)'
        in: query
        name: limit
        type: integer
      - default: 0
        description: 'Number of results to skip (default: 0)'
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Taxonomies found
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entities.Taxonomy'
                  type: array
              type: object
        "400":
          description: Bad request - Invalid pagination parameters
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all taxonomies
      tags:
      - taxonomies
    post:
      consumes:
      - application/json
      description: Create a new taxonomy with optional parent taxonomy
      parameters:
      - description: Taxonomy creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.CreateTaxonomyRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Taxonomy created successfully
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/entities.Taxonomy'
              type: object
        "400":
          description: Bad request - Invalid input data
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new taxonomy
      tags:
      - taxonomies
  /api/v1/taxonomies/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a taxonomy by its ID
      parameters:
      - description: Taxonomy ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Taxonomy deleted successfully
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad request - Invalid taxonomy ID format
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a taxonomy
      tags:
      - taxonomies
    get:
      consumes:
      - application/json
      description: Retrieve a taxonomy by its unique identifier
      parameters:
      - description: Taxonomy ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Taxonomy found
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/entities.Taxonomy'
              type: object
        "400":
          description: Bad request - Invalid taxonomy ID format
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Taxonomy not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get taxonomy by ID
      tags:
      - taxonomies
    put:
      consumes:
      - application/json
      description: Update an existing taxonomy by ID
      parameters:
      - description: Taxonomy ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Taxonomy update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateTaxonomyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Taxonomy updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/entities.Taxonomy'
              type: object
        "400":
          description: Bad request - Invalid input data
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a taxonomy
      tags:
      - taxonomies
  /api/v1/taxonomies/{id}/ancestors:
    get:
      consumes:
      - application/json
      description: Retrieve all ancestors of a taxonomy (parent, grandparent, etc.)
      parameters:
      - description: Taxonomy ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Taxonomy ancestors found
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entities.Taxonomy'
                  type: array
              type: object
        "400":
          description: Bad request - Invalid taxonomy ID format
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get taxonomy ancestors
      tags:
      - taxonomies
  /api/v1/taxonomies/{id}/children:
    get:
      consumes:
      - application/json
      description: Retrieve direct children of a taxonomy
      parameters:
      - description: Taxonomy ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Taxonomy children found
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entities.Taxonomy'
                  type: array
              type: object
        "400":
          description: Bad request - Invalid taxonomy ID format
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get taxonomy children
      tags:
      - taxonomies
  /api/v1/taxonomies/{id}/descendants:
    get:
      consumes:
      - application/json
      description: Retrieve all descendants of a taxonomy (children, grandchildren,
        etc.)
      parameters:
      - description: Taxonomy ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Taxonomy descendants found
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entities.Taxonomy'
                  type: array
              type: object
        "400":
          description: Bad request - Invalid taxonomy ID format
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get taxonomy descendants
      tags:
      - taxonomies
  /api/v1/taxonomies/{id}/siblings:
    get:
      consumes:
      - application/json
      description: Retrieve all siblings of a taxonomy (taxonomies with the same parent)
      parameters:
      - description: Taxonomy ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Taxonomy siblings found
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entities.Taxonomy'
                  type: array
              type: object
        "400":
          description: Bad request - Invalid taxonomy ID format
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get taxonomy siblings
      tags:
      - taxonomies
  /api/v1/taxonomies/hierarchy:
    get:
      consumes:
      - application/json
      description: Retrieve the complete taxonomy hierarchy tree
      produces:
      - application/json
      responses:
        "200":
          description: Taxonomy hierarchy found
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entities.Taxonomy'
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get taxonomy hierarchy
      tags:
      - taxonomies
  /api/v1/taxonomies/root:
    get:
      consumes:
      - application/json
      description: Retrieve all root taxonomies (taxonomies without parent)
      produces:
      - application/json
      responses:
        "200":
          description: Root taxonomies found
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entities.Taxonomy'
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get root taxonomies
      tags:
      - taxonomies
  /api/v1/taxonomies/search:
    get:
      consumes:
      - application/json
      description: Search taxonomies by name, slug, or description with pagination
      parameters:
      - description: Search query
        in: query
        name: q
        required: true
        type: string
      - default: 10
        description: 'Number of results to return (default: 10)'
        in: query
        name: limit
        type: integer
      - default: 0
        description: 'Number of results to skip (default: 0)'
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Taxonomies found
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entities.Taxonomy'
                  type: array
              type: object
        "400":
          description: Bad request - Search query is required
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Search taxonomies
      tags:
      - taxonomies
  /api/v1/taxonomies/search/advanced:
    get:
      consumes:
      - application/json
      description: Search taxonomies with advanced pagination and sorting options
      parameters:
      - description: Search query
        in: query
        name: query
        type: string
      - default: 1
        description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - default: 10
        description: 'Items per page (default: 10, max: 100)'
        in: query
        name: per_page
        type: integer
      - default: record_left
        description: 'Sort field (default: record_left)'
        in: query
        name: sort_by
        type: string
      - default: false
        description: 'Sort descending (default: false)'
        in: query
        name: sort_desc
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Taxonomies with pagination
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/pagination.TaxonomySearchResponse'
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Search taxonomies with pagination
      tags:
      - taxonomies
  /api/v1/taxonomies/slug/{slug}:
    get:
      consumes:
      - application/json
      description: Retrieve a taxonomy by its slug identifier
      parameters:
      - description: Taxonomy slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Taxonomy found
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/entities.Taxonomy'
              type: object
        "400":
          description: Bad request - Slug is required
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Taxonomy not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get taxonomy by slug
      tags:
      - taxonomies
  /api/v1/users/{user_id}/roles:
    get:
      consumes:
      - application/json
      description: Retrieve all roles assigned to a specific user
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User roles retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/responses.CommonResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entities.Role'
                  type: array
              type: object
        "400":
          description: Bad request - Invalid user ID
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      security:
      - BearerAuth: []
      summary: Get user roles
      tags:
      - Authentication & Authorization
  /api/v1/users/{user_id}/roles/{role_id}:
    delete:
      consumes:
      - application/json
      description: Remove a specific role from a user
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: user_id
        required: true
        type: string
      - description: Role ID
        format: uuid
        in: path
        name: role_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Role removed from user successfully
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "400":
          description: Bad request - Invalid user ID or role ID
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      security:
      - BearerAuth: []
      summary: Remove role from user
      tags:
      - Authentication & Authorization
    post:
      consumes:
      - application/json
      description: Assign a specific role to a user
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: user_id
        required: true
        type: string
      - description: Role ID
        format: uuid
        in: path
        name: role_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Role assigned to user successfully
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "400":
          description: Bad request - Invalid user ID or role ID
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      security:
      - BearerAuth: []
      summary: Assign role to user
      tags:
      - Authentication & Authorization
  /api/v1/users/{user_id}/roles/{role_id}/check:
    get:
      consumes:
      - application/json
      description: Check if a specific user has a specific role
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: user_id
        required: true
        type: string
      - description: Role ID
        format: uuid
        in: path
        name: role_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Role check completed successfully
          schema:
            allOf:
            - $ref: '#/definitions/responses.CommonResponse'
            - properties:
                data:
                  properties:
                    has_role:
                      type: boolean
                  type: object
              type: object
        "400":
          description: Bad request - Invalid user ID or role ID
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      security:
      - BearerAuth: []
      summary: Check if user has role
      tags:
      - Authentication & Authorization
  /auth/forget-password:
    post:
      consumes:
      - application/json
      description: Send a password reset email with OTP
      parameters:
      - description: Password reset request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.ForgetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset email sent
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad request - Invalid input data
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Request password reset
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user with username and password
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/requests.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/responses.AuthResponse'
              type: object
        "400":
          description: Bad request - Invalid input data
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized - Invalid credentials
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: User login
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout user (client should discard tokens)
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: User logout
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh an access token using a refresh token
      parameters:
      - description: Refresh token request
        in: body
        name: token
        required: true
        schema:
          $ref: '#/definitions/requests.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Token refreshed successfully
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/responses.TokenResponse'
              type: object
        "400":
          description: Bad request - Invalid input data
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized - Invalid refresh token
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Refresh access token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user account with the provided information
      parameters:
      - description: User registration request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/requests.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/responses.AuthResponse'
              type: object
        "400":
          description: Bad request - Invalid input data
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "409":
          description: Conflict - User already exists
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Reset password using email and OTP
      parameters:
      - description: Password reset with OTP request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset successful
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad request - Invalid input data
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized - Invalid OTP
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Reset password with OTP
      tags:
      - auth
  /healthz:
    get:
      consumes:
      - application/json
      description: Check if the API and all services are running and healthy
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.HealthResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/controllers.HealthResponse'
      summary: Health check endpoint
      tags:
      - health
  /media:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all media files with pagination
      parameters:
      - default: 10
        description: 'Number of media items to return (default: 10, max: 100)'
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - default: 0
        description: 'Number of media items to skip (default: 0)'
        in: query
        minimum: 0
        name: offset
        type: integer
      - description: Search query to filter media by name or filename
        in: query
        name: query
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of media files
          schema:
            allOf:
            - $ref: '#/definitions/responses.CommonResponse'
            - properties:
                data:
                  items: {}
                  type: array
              type: object
        "400":
          description: Bad request - Invalid parameters
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      security:
      - BearerAuth: []
      summary: Get all media
      tags:
      - media
    post:
      consumes:
      - multipart/form-data
      description: Upload a new media file to the system
      parameters:
      - description: Media file to upload
        in: formData
        name: file
        required: true
        type: file
      - description: Custom name for the media file
        in: formData
        name: name
        type: string
      - description: Description of the media file
        in: formData
        name: description
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Media uploaded successfully
          schema:
            allOf:
            - $ref: '#/definitions/responses.CommonResponse'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "400":
          description: Bad request - Invalid file or parameters
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "413":
          description: Payload too large - File size exceeds limit
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "415":
          description: Unsupported media type
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      security:
      - BearerAuth: []
      summary: Upload media
      tags:
      - media
  /media/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a media file from the system
      parameters:
      - description: Media ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Media deleted successfully
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "400":
          description: Bad request - Invalid media ID
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "404":
          description: Not found - Media does not exist
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      security:
      - BearerAuth: []
      summary: Delete media
      tags:
      - media
    get:
      consumes:
      - application/json
      description: Retrieve a specific media file by its unique identifier
      parameters:
      - description: Media ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Media file details
          schema:
            allOf:
            - $ref: '#/definitions/responses.CommonResponse'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "400":
          description: Bad request - Invalid media ID
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "404":
          description: Not found - Media does not exist
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      security:
      - BearerAuth: []
      summary: Get media by ID
      tags:
      - media
    put:
      consumes:
      - application/json
      description: Update media file metadata (name, description, etc.)
      parameters:
      - description: Media ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Media update request
        in: body
        name: media
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Media updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/responses.CommonResponse'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "400":
          description: Bad request - Invalid input data
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "404":
          description: Not found - Media does not exist
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      security:
      - BearerAuth: []
      summary: Update media
      tags:
      - media
  /menus:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of menus with optional filtering
      parameters:
      - default: 10
        description: 'Number of menus to return (default: 10, max: 100)'
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - default: 0
        description: 'Number of menus to skip (default: 0)'
        in: query
        minimum: 0
        name: offset
        type: integer
      - description: Filter by active status (true/false)
        enum:
        - "true"
        - "false"
        in: query
        name: active
        type: string
      - description: Filter by visible status (true/false)
        enum:
        - "true"
        - "false"
        in: query
        name: visible
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of menus
          schema:
            allOf:
            - $ref: '#/definitions/responses.CommonResponse'
            - properties:
                data:
                  items: {}
                  type: array
              type: object
        "400":
          description: Bad request - Invalid parameters
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      security:
      - BearerAuth: []
      summary: Get all menus
      tags:
      - menus
    post:
      consumes:
      - application/json
      description: Create a new menu item with the provided information
      parameters:
      - description: Menu creation request
        in: body
        name: menu
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Menu created successfully
          schema:
            allOf:
            - $ref: '#/definitions/responses.CommonResponse'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "400":
          description: Bad request - Invalid input data
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "409":
          description: Conflict - Menu with same slug already exists
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      security:
      - BearerAuth: []
      summary: Create a new menu
      tags:
      - menus
  /menus/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a menu item (soft delete)
      parameters:
      - description: Menu ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Menu deleted successfully
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "400":
          description: Bad request - Invalid menu ID
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "404":
          description: Not found - Menu does not exist
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      security:
      - BearerAuth: []
      summary: Delete menu
      tags:
      - menus
    get:
      consumes:
      - application/json
      description: Retrieve a specific menu by its unique identifier
      parameters:
      - description: Menu ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Menu details
          schema:
            allOf:
            - $ref: '#/definitions/responses.CommonResponse'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "400":
          description: Bad request - Invalid menu ID
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "404":
          description: Not found - Menu does not exist
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      security:
      - BearerAuth: []
      summary: Get menu by ID
      tags:
      - menus
    put:
      consumes:
      - application/json
      description: Update an existing menu's information
      parameters:
      - description: Menu ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Menu update request
        in: body
        name: menu
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Menu updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/responses.CommonResponse'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "400":
          description: Bad request - Invalid input data
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "404":
          description: Not found - Menu does not exist
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      security:
      - BearerAuth: []
      summary: Update menu
      tags:
      - menus
  /menus/{id}/activate:
    patch:
      consumes:
      - application/json
      description: Activate a deactivated menu item
      parameters:
      - description: Menu ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Menu activated successfully
          schema:
            allOf:
            - $ref: '#/definitions/responses.CommonResponse'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "400":
          description: Bad request - Invalid menu ID
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "404":
          description: Not found - Menu does not exist
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      security:
      - BearerAuth: []
      summary: Activate menu
      tags:
      - menus
  /menus/{id}/deactivate:
    patch:
      consumes:
      - application/json
      description: Deactivate an active menu item
      parameters:
      - description: Menu ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Menu deactivated successfully
          schema:
            allOf:
            - $ref: '#/definitions/responses.CommonResponse'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "400":
          description: Bad request - Invalid menu ID
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "404":
          description: Not found - Menu does not exist
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      security:
      - BearerAuth: []
      summary: Deactivate menu
      tags:
      - menus
  /menus/{id}/hide:
    patch:
      consumes:
      - application/json
      description: Make a visible menu item hidden
      parameters:
      - description: Menu ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Menu hidden successfully
          schema:
            allOf:
            - $ref: '#/definitions/responses.CommonResponse'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "400":
          description: Bad request - Invalid menu ID
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "404":
          description: Not found - Menu does not exist
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      security:
      - BearerAuth: []
      summary: Hide menu
      tags:
      - menus
  /menus/{id}/show:
    patch:
      consumes:
      - application/json
      description: Make a hidden menu item visible
      parameters:
      - description: Menu ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Menu shown successfully
          schema:
            allOf:
            - $ref: '#/definitions/responses.CommonResponse'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "400":
          description: Bad request - Invalid menu ID
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "404":
          description: Not found - Menu does not exist
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      security:
      - BearerAuth: []
      summary: Show menu
      tags:
      - menus
  /menus/hierarchy:
    get:
      consumes:
      - application/json
      description: Retrieve the complete menu hierarchy with nested structure
      produces:
      - application/json
      responses:
        "200":
          description: Menu hierarchy
          schema:
            allOf:
            - $ref: '#/definitions/responses.CommonResponse'
            - properties:
                data:
                  items: {}
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      security:
      - BearerAuth: []
      summary: Get menu hierarchy
      tags:
      - menus
  /menus/root:
    get:
      consumes:
      - application/json
      description: Retrieve all root-level menus (top-level menu items)
      produces:
      - application/json
      responses:
        "200":
          description: List of root menus
          schema:
            allOf:
            - $ref: '#/definitions/responses.CommonResponse'
            - properties:
                data:
                  items: {}
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      security:
      - BearerAuth: []
      summary: Get root menus
      tags:
      - menus
  /menus/search:
    get:
      consumes:
      - application/json
      description: Search menus by name or description
      parameters:
      - description: Search query
        in: query
        name: q
        required: true
        type: string
      - default: 10
        description: 'Number of menus to return (default: 10, max: 100)'
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - default: 0
        description: 'Number of menus to skip (default: 0)'
        in: query
        minimum: 0
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of matching menus
          schema:
            allOf:
            - $ref: '#/definitions/responses.CommonResponse'
            - properties:
                data:
                  items: {}
                  type: array
              type: object
        "400":
          description: Bad request - Search query is required
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      security:
      - BearerAuth: []
      summary: Search menus
      tags:
      - menus
  /menus/slug/{slug}:
    get:
      consumes:
      - application/json
      description: Retrieve a menu by its URL-friendly slug
      parameters:
      - description: Menu slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Menu details
          schema:
            allOf:
            - $ref: '#/definitions/responses.CommonResponse'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "400":
          description: Bad request - Slug is required
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "404":
          description: Not found - Menu does not exist
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      security:
      - BearerAuth: []
      summary: Get menu by slug
      tags:
      - menus
  /organizations:
    get:
      consumes:
      - application/json
      description: Get a paginated list of all organizations
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get all organizations
      tags:
      - organizations
    post:
      consumes:
      - application/json
      description: Create a new organization, optionally with a parent
      parameters:
      - description: Organization to create
        in: body
        name: organization
        required: true
        schema:
          $ref: '#/definitions/requests.CreateOrganizationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Create a new organization
      tags:
      - organizations
  /organizations/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an organization by its ID
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Delete an organization
      tags:
      - organizations
    get:
      consumes:
      - application/json
      description: Get a single organization by its ID
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get organization by ID
      tags:
      - organizations
    put:
      consumes:
      - application/json
      description: Update an organization's details
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      - description: Organization update data
        in: body
        name: organization
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateOrganizationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Update an organization
      tags:
      - organizations
  /organizations/{id}/ancestors:
    get:
      consumes:
      - application/json
      description: Get all ancestor organizations of an organization
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get ancestors of an organization
      tags:
      - organizations
  /organizations/{id}/children:
    get:
      consumes:
      - application/json
      description: Get direct children of an organization
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get children of an organization
      tags:
      - organizations
    post:
      consumes:
      - application/json
      description: Add a new child organization to a parent
      parameters:
      - description: Parent Organization ID
        in: path
        name: id
        required: true
        type: string
      - description: Child organization to create
        in: body
        name: organization
        required: true
        schema:
          $ref: '#/definitions/requests.CreateOrganizationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Add a child organization
      tags:
      - organizations
  /organizations/{id}/descendants:
    get:
      consumes:
      - application/json
      description: Get all descendant organizations of an organization
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get descendants of an organization
      tags:
      - organizations
  /organizations/{id}/move:
    post:
      consumes:
      - application/json
      description: Move an organization and all its descendants to a new parent
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      - description: Move request
        in: body
        name: move
        required: true
        schema:
          $ref: '#/definitions/requests.MoveOrganizationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Move an organization subtree
      tags:
      - organizations
  /organizations/{id}/path:
    get:
      consumes:
      - application/json
      description: Get the path from the root to the specified organization
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get path to an organization
      tags:
      - organizations
  /organizations/{id}/siblings:
    get:
      consumes:
      - application/json
      description: Get all sibling organizations of an organization
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get siblings of an organization
      tags:
      - organizations
  /organizations/{id}/stats:
    get:
      consumes:
      - application/json
      description: Get statistics for an organization (children and descendants count)
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get organization statistics
      tags:
      - organizations
  /organizations/{id}/status:
    put:
      consumes:
      - application/json
      description: Set the status of an organization
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      - description: Status request
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/requests.SetOrganizationStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Set organization status
      tags:
      - organizations
  /organizations/{id}/subtree:
    delete:
      consumes:
      - application/json
      description: Delete an organization and all its descendants
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Delete an organization subtree
      tags:
      - organizations
    get:
      consumes:
      - application/json
      description: Get the subtree rooted at the specified organization
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get a subtree of an organization
      tags:
      - organizations
  /organizations/root:
    get:
      consumes:
      - application/json
      description: Get all root organizations (organizations without a parent)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get root organizations
      tags:
      - organizations
  /organizations/search:
    get:
      consumes:
      - application/json
      description: Search organizations by query string
      parameters:
      - description: Search query
        in: query
        name: query
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Results per page
        in: query
        name: per_page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Search organizations
      tags:
      - organizations
  /organizations/tree:
    get:
      consumes:
      - application/json
      description: Get the entire organization tree structure
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get the full organization tree
      tags:
      - organizations
  /organizations/validate-hierarchy:
    get:
      consumes:
      - application/json
      description: Validate if a parent-child relationship is valid
      parameters:
      - description: Parent Organization ID
        in: query
        name: parent_id
        required: true
        type: string
      - description: Child Organization ID
        in: query
        name: child_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Validate organization hierarchy
      tags:
      - organizations
  /posts:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of posts with optional search and status
        filtering
      parameters:
      - default: 10
        description: 'Number of posts to return (default: 10, max: 100)'
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - default: 0
        description: 'Number of posts to skip (default: 0)'
        in: query
        minimum: 0
        name: offset
        type: integer
      - description: Search query to filter posts by title or content
        in: query
        name: query
        type: string
      - description: Filter posts by status (published, draft, etc.)
        enum:
        - published
        - draft
        - archived
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of posts
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/responses.PostResponse'
                  type: array
              type: object
        "400":
          description: Bad request - Invalid parameters
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get all posts
      tags:
      - posts
    post:
      consumes:
      - application/json
      description: Create a new blog post with the provided information
      parameters:
      - description: Post creation request
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/requests.CreatePostRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Post created successfully
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/responses.PostResponse'
              type: object
        "400":
          description: Bad request - Invalid input data
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "409":
          description: Conflict - Post with same slug already exists
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new post
      tags:
      - posts
  /posts/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a post (soft delete)
      parameters:
      - description: Post ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Post deleted successfully
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad request - Invalid post ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not found - Post does not exist
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete post
      tags:
      - posts
    get:
      consumes:
      - application/json
      description: Retrieve a post by its unique identifier
      parameters:
      - description: Post ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Post found
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/responses.PostResponse'
              type: object
        "400":
          description: Bad request - Invalid post ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not found - Post does not exist
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get post by ID
      tags:
      - posts
    put:
      consumes:
      - application/json
      description: Update an existing post's information
      parameters:
      - description: Post ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Post update request
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/requests.UpdatePostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Post updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/responses.PostResponse'
              type: object
        "400":
          description: Bad request - Invalid input data
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not found - Post does not exist
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update post
      tags:
      - posts
  /posts/{id}/publish:
    put:
      consumes:
      - application/json
      description: Publish a draft post to make it publicly visible
      parameters:
      - description: Post ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Post published successfully
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/responses.PostResponse'
              type: object
        "400":
          description: Bad request - Invalid post ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not found - Post does not exist
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Publish post
      tags:
      - posts
  /posts/{id}/unpublish:
    put:
      consumes:
      - application/json
      description: Unpublish a post to make it a draft (not publicly visible)
      parameters:
      - description: Post ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Post unpublished successfully
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/responses.PostResponse'
              type: object
        "400":
          description: Bad request - Invalid post ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not found - Post does not exist
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Unpublish post
      tags:
      - posts
  /posts/author/{authorID}:
    get:
      consumes:
      - application/json
      description: Retrieve all posts written by a specific author
      parameters:
      - description: Author ID
        format: uuid
        in: path
        name: authorID
        required: true
        type: string
      - default: 10
        description: 'Number of posts to return (default: 10, max: 100)'
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - default: 0
        description: 'Number of posts to skip (default: 0)'
        in: query
        minimum: 0
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of posts by author
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/responses.PostResponse'
                  type: array
              type: object
        "400":
          description: Bad request - Invalid author ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not found - Author does not exist
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get posts by author
      tags:
      - posts
  /posts/slug/{slug}:
    get:
      consumes:
      - application/json
      description: Retrieve a post by its URL-friendly slug
      parameters:
      - description: Post slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Post found
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/responses.PostResponse'
              type: object
        "400":
          description: Bad request - Slug is required
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not found - Post does not exist
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get post by slug
      tags:
      - posts
  /rbac/policies:
    delete:
      consumes:
      - application/json
      description: Remove a policy rule from the RBAC system
      parameters:
      - description: Policy to remove
        in: body
        name: policy
        required: true
        schema:
          $ref: '#/definitions/controllers.RemovePolicyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      security:
      - BearerAuth: []
      summary: Remove an RBAC policy
      tags:
      - rbac
    get:
      consumes:
      - application/json
      description: Retrieve all RBAC policies from the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/responses.CommonResponse'
            - properties:
                data:
                  items:
                    items:
                      type: string
                    type: array
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      security:
      - BearerAuth: []
      summary: Get all RBAC policies
      tags:
      - rbac
    post:
      consumes:
      - application/json
      description: Add a new policy rule to the RBAC system
      parameters:
      - description: Policy to add
        in: body
        name: policy
        required: true
        schema:
          $ref: '#/definitions/controllers.AddPolicyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      security:
      - BearerAuth: []
      summary: Add a new RBAC policy
      tags:
      - rbac
  /rbac/roles/{role}/users:
    get:
      consumes:
      - application/json
      description: Retrieve all users assigned to a specific role
      parameters:
      - description: Role name
        in: path
        name: role
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/responses.CommonResponse'
            - properties:
                data:
                  items:
                    type: string
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      security:
      - BearerAuth: []
      summary: Get users for a role
      tags:
      - rbac
  /rbac/users/{user}/roles:
    get:
      consumes:
      - application/json
      description: Retrieve all roles assigned to a specific user
      parameters:
      - description: User ID
        in: path
        name: user
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/responses.CommonResponse'
            - properties:
                data:
                  items:
                    type: string
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      security:
      - BearerAuth: []
      summary: Get roles for a user
      tags:
      - rbac
  /rbac/users/{user}/roles/{role}:
    delete:
      consumes:
      - application/json
      description: Remove a role from a specific user
      parameters:
      - description: User ID
        in: path
        name: user
        required: true
        type: string
      - description: Role name
        in: path
        name: role
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      security:
      - BearerAuth: []
      summary: Remove role from user
      tags:
      - rbac
    post:
      consumes:
      - application/json
      description: Assign a role to a specific user
      parameters:
      - description: User ID
        in: path
        name: user
        required: true
        type: string
      - description: Role name
        in: path
        name: role
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      security:
      - BearerAuth: []
      summary: Add role to user
      tags:
      - rbac
  /roles:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of roles with optional filtering
      parameters:
      - default: 10
        description: 'Number of roles to return (default: 10, max: 100)'
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - default: 0
        description: 'Number of roles to skip (default: 0)'
        in: query
        minimum: 0
        name: offset
        type: integer
      - description: Filter by active status (true/false)
        enum:
        - "true"
        - "false"
        in: query
        name: active
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of roles
          schema:
            allOf:
            - $ref: '#/definitions/responses.CommonResponse'
            - properties:
                data:
                  items: {}
                  type: array
              type: object
        "400":
          description: Bad request - Invalid parameters
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      security:
      - BearerAuth: []
      summary: Get all roles
      tags:
      - roles
    post:
      consumes:
      - application/json
      description: Create a new role with the provided information
      parameters:
      - description: Role creation request
        in: body
        name: role
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Role created successfully
          schema:
            allOf:
            - $ref: '#/definitions/responses.CommonResponse'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "400":
          description: Bad request - Invalid input data
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "409":
          description: Conflict - Role with same slug already exists
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      security:
      - BearerAuth: []
      summary: Create a new role
      tags:
      - roles
  /roles/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a role (soft delete)
      parameters:
      - description: Role ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Role deleted successfully
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "400":
          description: Bad request - Invalid role ID
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "404":
          description: Not found - Role does not exist
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      security:
      - BearerAuth: []
      summary: Delete role
      tags:
      - roles
    get:
      consumes:
      - application/json
      description: Retrieve a specific role by its unique identifier
      parameters:
      - description: Role ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Role details
          schema:
            allOf:
            - $ref: '#/definitions/responses.CommonResponse'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "400":
          description: Bad request - Invalid role ID
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "404":
          description: Not found - Role does not exist
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      security:
      - BearerAuth: []
      summary: Get role by ID
      tags:
      - roles
    put:
      consumes:
      - application/json
      description: Update an existing role's information
      parameters:
      - description: Role ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Role update request
        in: body
        name: role
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Role updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/responses.CommonResponse'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "400":
          description: Bad request - Invalid input data
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "404":
          description: Not found - Role does not exist
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      security:
      - BearerAuth: []
      summary: Update role
      tags:
      - roles
  /roles/{id}/activate:
    put:
      consumes:
      - application/json
      description: Activate a deactivated role
      parameters:
      - description: Role ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Role activated successfully
          schema:
            allOf:
            - $ref: '#/definitions/responses.CommonResponse'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "400":
          description: Bad request - Invalid role ID
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "404":
          description: Not found - Role does not exist
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      security:
      - BearerAuth: []
      summary: Activate role
      tags:
      - roles
  /roles/{id}/deactivate:
    put:
      consumes:
      - application/json
      description: Deactivate an active role
      parameters:
      - description: Role ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Role deactivated successfully
          schema:
            allOf:
            - $ref: '#/definitions/responses.CommonResponse'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "400":
          description: Bad request - Invalid role ID
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "404":
          description: Not found - Role does not exist
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      security:
      - BearerAuth: []
      summary: Deactivate role
      tags:
      - roles
  /roles/search:
    get:
      consumes:
      - application/json
      description: Search roles by name or description
      parameters:
      - description: Search query
        in: query
        name: query
        required: true
        type: string
      - default: 10
        description: 'Number of roles to return (default: 10, max: 100)'
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - default: 0
        description: 'Number of roles to skip (default: 0)'
        in: query
        minimum: 0
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of matching roles
          schema:
            allOf:
            - $ref: '#/definitions/responses.CommonResponse'
            - properties:
                data:
                  items: {}
                  type: array
              type: object
        "400":
          description: Bad request - Invalid parameters
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      security:
      - BearerAuth: []
      summary: Search roles
      tags:
      - roles
  /roles/slug/{slug}:
    get:
      consumes:
      - application/json
      description: Retrieve a role by its URL-friendly slug
      parameters:
      - description: Role slug
        in: path
        name: slug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Role details
          schema:
            allOf:
            - $ref: '#/definitions/responses.CommonResponse'
            - properties:
                data:
                  additionalProperties: true
                  type: object
              type: object
        "400":
          description: Bad request - Slug is required
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "404":
          description: Not found - Role does not exist
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      security:
      - BearerAuth: []
      summary: Get role by slug
      tags:
      - roles
  /tags:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all tags with pagination
      parameters:
      - description: 'Number of tags to return (default: 10, max: 100)'
        in: query
        name: limit
        type: integer
      - description: 'Number of tags to skip (default: 0)'
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of tags
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  items: {}
                  type: array
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all tags
      tags:
      - tags
    post:
      consumes:
      - application/json
      description: Create a new tag
      parameters:
      - description: Tag object
        in: body
        name: tag
        required: true
        schema:
          $ref: '#/definitions/requests.CreateTagRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Tag created successfully
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data: {}
              type: object
        "400":
          description: Bad request - Invalid input data
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "409":
          description: Conflict - Tag with same slug already exists
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create tag
      tags:
      - tags
  /tags/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a tag by its ID
      parameters:
      - description: Tag ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Tag deleted successfully
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad request - Invalid tag ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not found - Tag does not exist
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete tag
      tags:
      - tags
    get:
      consumes:
      - application/json
      description: Retrieve a tag by its ID
      parameters:
      - description: Tag ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Tag retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data: {}
              type: object
        "400":
          description: Bad request - Invalid tag ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not found - Tag does not exist
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get tag by ID
      tags:
      - tags
    put:
      consumes:
      - application/json
      description: Update an existing tag by its ID
      parameters:
      - description: Tag ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Tag object
        in: body
        name: tag
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateTagRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Tag updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data: {}
              type: object
        "400":
          description: Bad request - Invalid tag ID or input data
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not found - Tag does not exist
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "409":
          description: Conflict - Tag with same slug already exists
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update tag
      tags:
      - tags
  /tags/search:
    get:
      consumes:
      - application/json
      description: Search tags by query with pagination
      parameters:
      - description: Search query
        in: query
        name: query
        required: true
        type: string
      - description: 'Number of tags to return (default: 10, max: 100)'
        in: query
        name: limit
        type: integer
      - description: 'Number of tags to skip (default: 0)'
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Search results
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  items: {}
                  type: array
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Search tags
      tags:
      - tags
  /users:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of users with optional search and filtering
      parameters:
      - default: 10
        description: 'Number of users to return (default: 10, max: 100)'
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - default: 0
        description: 'Number of users to skip (default: 0)'
        in: query
        minimum: 0
        name: offset
        type: integer
      - description: Search query to filter users by username, email, or phone
        in: query
        name: query
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/responses.UserResponse'
                  type: array
              type: object
        "400":
          description: Bad request - Invalid parameters
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user account with the provided information
      parameters:
      - description: User creation request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/requests.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/responses.UserResponse'
              type: object
        "400":
          description: Bad request - Invalid input data
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "409":
          description: Conflict - User already exists
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user account (soft delete)
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad request - Invalid user ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not found - User does not exist
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Retrieve a user by their unique identifier
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User found
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/responses.UserResponse'
              type: object
        "400":
          description: Bad request - Invalid user ID
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not found - User does not exist
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update an existing user's information
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: User update request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/responses.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/responses.UserResponse'
              type: object
        "400":
          description: Bad request - Invalid input data
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not found - User does not exist
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - users
  /users/{id}/password:
    put:
      consumes:
      - application/json
      description: Change a user's password with old password verification
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Password change request
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/requests.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Bad request - Invalid input data
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized - Invalid old password
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not found - User does not exist
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - users
  /users/{user_id}/menus:
    get:
      consumes:
      - application/json
      description: Retrieve all menus accessible to a specific user based on their
        roles
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of user menus
          schema:
            allOf:
            - $ref: '#/definitions/responses.CommonResponse'
            - properties:
                data:
                  items: {}
                  type: array
              type: object
        "400":
          description: Bad request - Invalid user ID
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "404":
          description: Not found - User does not exist
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      security:
      - BearerAuth: []
      summary: Get user menus
      tags:
      - menus
  /v1/comments:
    get:
      consumes:
      - application/json
      description: Get all comments with optional filtering
      parameters:
      - description: Filter by post ID
        in: query
        name: post_id
        type: string
      - description: Filter by user ID
        in: query
        name: user_id
        type: string
      - description: Filter by parent comment ID
        in: query
        name: parent_id
        type: string
      - description: Filter by status (approved, pending, rejected)
        in: query
        name: status
        type: string
      - description: 'Number of comments to return (default: 10, max: 100)'
        in: query
        name: limit
        type: integer
      - description: 'Number of comments to skip (default: 0)'
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      summary: List comments
      tags:
      - comments
    post:
      consumes:
      - application/json
      description: Create a new comment
      parameters:
      - description: Comment info
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/requests.CreateCommentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      summary: Create comment
      tags:
      - comments
  /v1/comments/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a comment by its ID
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      summary: Delete comment
      tags:
      - comments
    get:
      consumes:
      - application/json
      description: Get a single comment by its ID
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      summary: Get comment by ID
      tags:
      - comments
    put:
      consumes:
      - application/json
      description: Update an existing comment
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: string
      - description: Comment info
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateCommentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      summary: Update comment
      tags:
      - comments
  /v1/comments/{id}/approve:
    put:
      consumes:
      - application/json
      description: Approve a comment by its ID
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      summary: Approve comment
      tags:
      - comments
  /v1/comments/{id}/reject:
    put:
      consumes:
      - application/json
      description: Reject a comment by its ID
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.CommonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.CommonResponse'
      summary: Reject comment
      tags:
      - comments
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
