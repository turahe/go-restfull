basePath: /api
definitions:
  dto.GetUserDTO:
    properties:
      createdAt:
        type: string
      email:
        type: string
      id:
        type: string
      phone:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    type: object
  dto.SettingDTO:
    properties:
      createdAt:
        type: string
      id:
        type: string
      key:
        type: string
      modelId:
        type: string
      modelType:
        type: string
      updatedAt:
        type: string
      value:
        type: string
    type: object
  exception.ExceptionError:
    properties:
      error_subcode:
        type: integer
      message:
        type: string
      type:
        $ref: '#/definitions/exception.errorType'
    type: object
  exception.ExceptionErrors:
    properties:
      errItems:
        items:
          $ref: '#/definitions/exception.ExceptionError'
        type: array
      globalMessage:
        type: string
      httpStatusCode:
        type: integer
    type: object
  exception.errorType:
    enum:
    - UnknownError
    - BadRequest
    - NotFound
    - Unauthorized
    - ValidationError
    - JobError
    - ExternalServiceError
    - DatasourceError
    type: string
    x-enum-varnames:
    - ERROR_TYPE_UNKNOWN_ERROR
    - ERROR_TYPE_BAD_REQUEST
    - ERROR_TYPE_NOT_FOUND
    - ERROR_TYPE_UNAUTHORIZED
    - ERROR_TYPE_VALIDATION_ERROR
    - ERROR_TYPE_JOB_ERROR
    - ERROR_TYPE_EXTERNAL_SERVICE_ERROR
    - ERROR_TYPE_DATASOURCE_ERROR
  requests.AuthLoginRequest:
    properties:
      password:
        type: string
      username:
        maxLength: 32
        minLength: 3
        type: string
    required:
    - username
    type: object
  requests.AuthRegisterRequest:
    properties:
      confirm_password:
        type: string
      email:
        type: string
      password:
        maxLength: 32
        minLength: 8
        type: string
      phone:
        type: string
      username:
        maxLength: 32
        minLength: 3
        type: string
    required:
    - confirm_password
    - email
    - password
    - phone
    - username
    type: object
  requests.ChangeEmailRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  requests.ChangePasswordRequest:
    properties:
      confirm_password:
        type: string
      new_password:
        maxLength: 32
        minLength: 8
        type: string
      old_password:
        maxLength: 32
        minLength: 8
        type: string
    required:
    - confirm_password
    - new_password
    - old_password
    type: object
  requests.ChangePhoneRequest:
    properties:
      phone:
        type: string
    required:
    - phone
    type: object
  requests.ChangeUserNameRequest:
    properties:
      username:
        maxLength: 32
        minLength: 3
        type: string
    required:
    - username
    type: object
  requests.CreateSettingRequest:
    properties:
      key:
        type: string
      modelId:
        type: string
      modelType:
        type: string
      value:
        type: string
    required:
    - key
    - value
    type: object
  requests.ForgetPasswordRequest:
    properties:
      identity:
        type: string
    required:
    - identity
    type: object
  requests.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  requests.UpdateSettingRequest:
    properties:
      key:
        type: string
      value:
        type: string
    required:
    - key
    - value
    type: object
  requests.UpdateUserRequest:
    properties:
      email:
        type: string
      phone:
        type: string
      username:
        maxLength: 32
        minLength: 3
        type: string
    required:
    - email
    - phone
    - username
    type: object
  requests.ValidateOTPRequest:
    properties:
      identity:
        type: string
      otp:
        type: string
      token:
        type: string
    required:
    - identity
    type: object
  response.CommonResponse:
    properties:
      code:
        type: integer
      data: {}
      errors:
        $ref: '#/definitions/exception.ExceptionErrors'
      message:
        type: string
      path:
        type: string
      request_id:
        type: string
    type: object
  response.PaginationResponse:
    properties:
      current_page:
        type: integer
      data: {}
      last_page:
        type: integer
      next_page:
        type: integer
      path:
        type: string
      per_page:
        type: integer
      previous_page:
        type: integer
      total_count:
        type: integer
      total_page:
        type: integer
    type: object
  utils.TokenPair:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      refresh_token:
        type: string
    type: object
host: localhost:8000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A comprehensive RESTful API built with Go, Fiber, and PostgreSQL
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Go RESTful API
  version: "1.0"
paths:
  /healthz:
    get:
      consumes:
      - application/json
      description: Check if the API is running and healthy
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CommonResponse'
      summary: Health check endpoint
      tags:
      - health
  /v1/auth/forget-password:
    post:
      consumes:
      - application/json
      description: Send an OTP to phone or reset link to email for password reset
      parameters:
      - description: Identity (email or phone)
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/requests.ForgetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.CommonResponse'
      summary: Forget password (send OTP or reset link)
      tags:
      - auth
  /v1/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with username and password
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/requests.AuthLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.CommonResponse'
            - properties:
                data:
                  $ref: '#/definitions/utils.TokenPair'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.CommonResponse'
      summary: User login
      tags:
      - auth
  /v1/auth/logout:
    post:
      consumes:
      - application/json
      description: Logout user (client should discard tokens)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.CommonResponse'
      security:
      - BearerAuth: []
      summary: User logout
      tags:
      - auth
  /v1/auth/refresh:
    post:
      consumes:
      - application/json
      description: Get a new access token using a refresh token
      parameters:
      - description: Refresh token
        in: body
        name: refresh_token
        required: true
        schema:
          $ref: '#/definitions/requests.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.CommonResponse'
            - properties:
                data:
                  $ref: '#/definitions/utils.TokenPair'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.CommonResponse'
      summary: Refresh access token
      tags:
      - auth
  /v1/auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user account
      parameters:
      - description: User registration information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/requests.AuthRegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/response.CommonResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.GetUserDTO'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.CommonResponse'
      summary: User registration
      tags:
      - auth
  /v1/auth/validate-otp:
    post:
      consumes:
      - application/json
      description: Validate the OTP sent to phone or reset link sent to email
      parameters:
      - description: Validation data (OTP for phone or token for email)
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/requests.ValidateOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.CommonResponse'
      summary: Validate OTP or reset link
      tags:
      - auth
  /v1/media:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of media files with optional search query
      parameters:
      - description: 'Number of items per page (default: 10)'
        in: query
        name: limit
        type: integer
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: Search query for filtering media
        in: query
        name: query
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.PaginationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.CommonResponse'
      summary: Get all media files with pagination
      tags:
      - media
    post:
      consumes:
      - multipart/form-data
      description: Upload a new media file to the system
      parameters:
      - description: Media file to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.CommonResponse'
      summary: Upload media file
      tags:
      - media
  /v1/media/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a media file by its UUID
      parameters:
      - description: Media UUID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.CommonResponse'
      summary: Delete media file
      tags:
      - media
    get:
      consumes:
      - application/json
      description: Retrieve a specific media file by its UUID
      parameters:
      - description: Media UUID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.CommonResponse'
      summary: Get media by ID
      tags:
      - media
  /v1/queues:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all available queues
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.CommonResponse'
      summary: Get all queues
      tags:
      - queues
  /v1/settings:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all settings
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.CommonResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.SettingDTO'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.CommonResponse'
      summary: Get all settings
      tags:
      - settings
    post:
      consumes:
      - application/json
      description: Create a new setting with the provided information
      parameters:
      - description: Setting information
        in: body
        name: setting
        required: true
        schema:
          $ref: '#/definitions/requests.CreateSettingRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/response.CommonResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.SettingDTO'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.CommonResponse'
      summary: Create a new setting
      tags:
      - settings
  /v1/settings/{key}:
    delete:
      consumes:
      - application/json
      description: Delete a setting by its key
      parameters:
      - description: Setting key
        in: path
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.CommonResponse'
      summary: Delete setting
      tags:
      - settings
    get:
      consumes:
      - application/json
      description: Retrieve a specific setting by its key
      parameters:
      - description: Setting key
        in: path
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.CommonResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.SettingDTO'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.CommonResponse'
      summary: Get setting by key
      tags:
      - settings
    put:
      consumes:
      - application/json
      description: Update an existing setting by key
      parameters:
      - description: Setting key
        in: path
        name: key
        required: true
        type: string
      - description: Updated setting information
        in: body
        name: setting
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateSettingRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.CommonResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.SettingDTO'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.CommonResponse'
      summary: Update setting
      tags:
      - settings
  /v1/users:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of users with optional search query
      parameters:
      - description: 'Number of items per page (default: 10)'
        in: query
        name: limit
        type: integer
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: Search query for filtering users
        in: query
        name: query
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.PaginationResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.GetUserDTO'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.CommonResponse'
      summary: Get all users with pagination
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user with the provided information
      parameters:
      - description: User information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/response.CommonResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.GetUserDTO'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.CommonResponse'
      summary: Create a new user
      tags:
      - users
  /v1/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by their UUID
      parameters:
      - description: User UUID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.CommonResponse'
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Retrieve a specific user by their UUID
      parameters:
      - description: User UUID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.CommonResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.GetUserDTO'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.CommonResponse'
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update an existing user's information by ID
      parameters:
      - description: User UUID
        in: path
        name: id
        required: true
        type: string
      - description: Updated user information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.CommonResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.GetUserDTO'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.CommonResponse'
      summary: Update user information
      tags:
      - users
  /v1/users/change-email:
    post:
      consumes:
      - application/json
      description: Change the email address for a specific user
      parameters:
      - description: User UUID
        in: path
        name: id
        required: true
        type: string
      - description: Email change information
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/requests.ChangeEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.CommonResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.GetUserDTO'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.CommonResponse'
      summary: Change user email
      tags:
      - users
  /v1/users/change-password:
    post:
      consumes:
      - application/json
      description: Change the password for a specific user
      parameters:
      - description: User UUID
        in: path
        name: id
        required: true
        type: string
      - description: Password change information
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/requests.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.CommonResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.GetUserDTO'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.CommonResponse'
      summary: Change user password
      tags:
      - users
  /v1/users/change-phone:
    post:
      consumes:
      - application/json
      description: Change the phone number for a specific user
      parameters:
      - description: User UUID
        in: path
        name: id
        required: true
        type: string
      - description: Phone change information
        in: body
        name: phone
        required: true
        schema:
          $ref: '#/definitions/requests.ChangePhoneRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.CommonResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.GetUserDTO'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.CommonResponse'
      summary: Change user phone number
      tags:
      - users
  /v1/users/change-username:
    post:
      consumes:
      - application/json
      description: Change the username for a specific user
      parameters:
      - description: User UUID
        in: path
        name: id
        required: true
        type: string
      - description: Username change information
        in: body
        name: username
        required: true
        schema:
          $ref: '#/definitions/requests.ChangeUserNameRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.CommonResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.GetUserDTO'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.CommonResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/response.CommonResponse'
      summary: Change user username
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
