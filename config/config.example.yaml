env: "dev" # dev, staging, production
app:
  key: "my-app-key"
  name: "My App"
  nameSlug: "my-app"
  jwtSecret: "your-jwt-secret"
  accessTokenExpiration: 3600

httpServer:
  port: 8000
  swaggerURL: "/swagger"

log:
  level: "debug"
  stacktraceLevel: "error" # debug, info, warn, error, dpanic, panic, fatal
  fileEnabled: false
  fileSize: 10 # MB
  filePath: "log/log.log"
  fileCompress: false # enable log file compress before rotate
  maxAge: 1 # days to keep log files
  maxBackups: 10 # number of log files

# Legacy single database configuration (for backward compatibility)
postgres:
  host: "host.docker.internal" # use "host.docker.internal" if you run app inside docker container
  port: 5432
  database: "my_db"
  schema: "public"
  username: "my_user"
  password: "secret"
  maxConnections: 20
  maxIdleConnections: 10

# New multi-database configuration
databases:
  # Primary database (default)
  - name: "primary"
    host: "host.docker.internal"
    port: 5432
    database: "primary_db"
    schema: "public"
    username: "primary_user"
    password: "primary_secret"
    maxConnections: 20
    connectionTimeout: 30
    idleTimeout: 300
    maxIdleConns: 10
    maxOpenConns: 100
    sslMode: "disable"
    isDefault: true

  # Secondary database (read replica)
  - name: "secondary"
    host: "host.docker.internal"
    port: 5433
    database: "secondary_db"
    schema: "public"
    username: "secondary_user"
    password: "secondary_secret"
    maxConnections: 15
    connectionTimeout: 30
    idleTimeout: 300
    maxIdleConns: 5
    maxOpenConns: 50
    sslMode: "disable"
    isDefault: false

  # Analytics database
  - name: "analytics"
    host: "analytics-db.example.com"
    port: 5432
    database: "analytics_db"
    schema: "analytics"
    username: "analytics_user"
    password: "analytics_secret"
    maxConnections: 10
    connectionTimeout: 30
    idleTimeout: 300
    maxIdleConns: 3
    maxOpenConns: 20
    sslMode: "require"
    isDefault: false

  # Testing database
  - name: "testing"
    host: "host.docker.internal"
    port: 5434
    database: "testing_db"
    schema: "test"
    username: "test_user"
    password: "test_secret"
    maxConnections: 5
    connectionTimeout: 30
    idleTimeout: 300
    maxIdleConns: 2
    maxOpenConns: 10
    sslMode: "disable"
    isDefault: false

# RabbitMQ configuration
rabbitmq:
  enable: true
  host: "host.docker.internal"
  port: 5672
  username: "guest"
  password: "guest"
  vhost: "/"
  ssl: false
  connection:
    maxRetries: 3
    retryDelay: 5
    timeout: 30
  channel:
    prefetchCount: 10
    qos: 10
  exchanges:
    # User events exchange
    - name: "user.events"
      type: "topic"
      durable: true
      autoDelete: false
      internal: false
      arguments: {}
    
    # Email notifications exchange
    - name: "email.notifications"
      type: "direct"
      durable: true
      autoDelete: false
      internal: false
      arguments: {}
    
    # System events exchange
    - name: "system.events"
      type: "fanout"
      durable: true
      autoDelete: false
      internal: false
      arguments: {}
  
  queues:
    # User registration queue
    - name: "user.registration"
      durable: true
      autoDelete: false
      exclusive: false
      arguments: {}
      bindings:
        - exchange: "user.events"
          routingKey: "user.registered"
    
    # Email sending queue
    - name: "email.sending"
      durable: true
      autoDelete: false
      exclusive: false
      arguments: {}
      bindings:
        - exchange: "email.notifications"
          routingKey: "email.send"
    
    # System logging queue
    - name: "system.logging"
      durable: true
      autoDelete: false
      exclusive: false
      arguments: {}
      bindings:
        - exchange: "system.events"
          routingKey: "system.log"
    
    # Dead letter queue for failed messages
    - name: "dead.letter"
      durable: true
      autoDelete: false
      exclusive: false
      arguments:
        "x-message-ttl": "86400000"  # 24 hours in milliseconds
      bindings: []

# Meilisearch configuration
meilisearch:
  enable: true
  host: "host.docker.internal"
  port: 7700
  masterKey: "change_me"
  apiKey: "your-api-key"
  indexes:
    # Posts index
    - name: "posts"
      uid: "posts"
      primaryKey: "id"
      settings:
        searchableAttributes:
          - "title"
          - "subtitle"
          - "description"
          - "content"
        filterableAttributes:
          - "status"
          - "language"
          - "is_sticky"
          - "published_at"
        sortableAttributes:
          - "created_at"
          - "updated_at"
          - "published_at"
        rankingRules:
          - "words"
          - "typo"
          - "proximity"
          - "attribute"
          - "sort"
          - "exactness"
    
    # Users index
    - name: "users"
      uid: "users"
      primaryKey: "id"
      settings:
        searchableAttributes:
          - "username"
          - "email"
          - "first_name"
          - "last_name"
        filterableAttributes:
          - "status"
          - "role"
        sortableAttributes:
          - "created_at"
          - "updated_at"
    
    # Organizations index
    - name: "organizations"
      uid: "organizations"
      primaryKey: "id"
      settings:
        searchableAttributes:
          - "name"
          - "description"
          - "code"
        filterableAttributes:
          - "type"
          - "status"
        sortableAttributes:
          - "created_at"
          - "updated_at"

Redis:
  - host: "host.docker.internal"
    port: 6379
    password: ""
    database: 0

sentry:
  dsn: ""
  environment: "DEV"
  release: "webapi@v0.1.0"
  debug: false

scheduler:
  timezone: "Asia/Jakarta" # Timezone for cron jobs

# schedules:
#   - cron: "0 */20 * * * *"
#     job: "SyncAll"
#     isEnabled: true

minio:
  enable: false
  endpoint: "host.docker.internal:9000"
  accessKeyID: "minioadmin"
  accessKeySecret: "minioadmin"
  useSSL: false
  bucket: "my-bucket"
  region: "us-east-1"

email:
  smtpHost: "smtp.gmail.com"
  smtpPort: 587
  username: "your-email@gmail.com"
  password: "your-app-password"
  fromAddress: "noreply@example.com"
  fromName: "My App"

casbin:
  model: "config/rbac_model.conf"
  policy: "config/rbac_policy.csv"
  redis:
    host: "localhost"
    port: 6379
    password: ""
    db: 1
    key: "casbin_policy"

backup:
  enabled: true
  directory: "backups"
  retentionDays: 30
  cleanupOld: true
  compressBackup: true
