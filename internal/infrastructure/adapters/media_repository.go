package adapters

import (
	"context"
	"webapi/internal/db/model"
	"webapi/internal/domain/entities"
	"webapi/internal/domain/repositories"
	"webapi/internal/repository"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgxpool"
	"github.com/redis/go-redis/v9"
)

type PostgresMediaRepository struct {
	repo repository.MediaRepository
}

func NewPostgresMediaRepository(db *pgxpool.Pool, redisClient redis.Cmdable) repositories.MediaRepository {
	return &PostgresMediaRepository{
		repo: repository.NewMediaRepository(db, redisClient),
	}
}

func (r *PostgresMediaRepository) Create(ctx context.Context, media *entities.Media) error {
	// Convert domain entity to model
	mediaModel := &model.Media{
		ID:        media.ID,
		Name:      media.OriginalName,
		FileName:  media.FileName,
		Size:      media.Size,
		MimeType:  media.MimeType,
		Disk:      "local",  // Default disk
		Hash:      "",       // Will be generated by the repository
		ParentID:  uuid.Nil, // No parent by default
		CreatedAt: media.CreatedAt,
		UpdatedAt: media.UpdatedAt,
	}

	_, err := r.repo.CreateMedia(ctx, *mediaModel)
	return err
}

func (r *PostgresMediaRepository) GetByID(ctx context.Context, id uuid.UUID) (*entities.Media, error) {
	mediaModel, err := r.repo.GetMediaByID(ctx, id)
	if err != nil {
		return nil, err
	}

	// Convert model to domain entity
	media := &entities.Media{
		ID:           mediaModel.ID,
		OriginalName: mediaModel.Name,
		FileName:     mediaModel.FileName,
		Size:         mediaModel.Size,
		MimeType:     mediaModel.MimeType,
		Path:         "",       // Not available in model
		URL:          "",       // Not available in model
		UserID:       uuid.Nil, // Not available in model
		CreatedAt:    mediaModel.CreatedAt,
		UpdatedAt:    mediaModel.UpdatedAt,
	}

	return media, nil
}

func (r *PostgresMediaRepository) GetByUserID(ctx context.Context, userID uuid.UUID, limit, offset int) ([]*entities.Media, error) {
	// This would need to be implemented based on your specific requirements
	// For now, returning empty slice as the existing repository doesn't have this method
	return []*entities.Media{}, nil
}

func (r *PostgresMediaRepository) GetAll(ctx context.Context, limit, offset int) ([]*entities.Media, error) {
	mediaModels, err := r.repo.GetMedia(ctx)
	if err != nil {
		return nil, err
	}

	// Convert models to domain entities
	var media []*entities.Media
	for _, mediaModel := range mediaModels {
		media = append(media, &entities.Media{
			ID:           mediaModel.ID,
			OriginalName: mediaModel.Name,
			FileName:     mediaModel.FileName,
			Size:         mediaModel.Size,
			MimeType:     mediaModel.MimeType,
			Path:         "",       // Not available in model
			URL:          "",       // Not available in model
			UserID:       uuid.Nil, // Not available in model
			CreatedAt:    mediaModel.CreatedAt,
			UpdatedAt:    mediaModel.UpdatedAt,
		})
	}

	return media, nil
}

func (r *PostgresMediaRepository) Search(ctx context.Context, query string, limit, offset int) ([]*entities.Media, error) {
	// This would need to be implemented based on your specific requirements
	// For now, returning empty slice as the existing repository doesn't have this method
	return []*entities.Media{}, nil
}

func (r *PostgresMediaRepository) Update(ctx context.Context, media *entities.Media) error {
	// Convert domain entity to model
	mediaModel := model.Media{
		ID:        media.ID,
		Name:      media.OriginalName,
		FileName:  media.FileName,
		Size:      media.Size,
		MimeType:  media.MimeType,
		Disk:      "local",  // Default disk
		Hash:      "",       // Will be generated by the repository
		ParentID:  uuid.Nil, // No parent by default
		CreatedAt: media.CreatedAt,
		UpdatedAt: media.UpdatedAt,
	}

	_, err := r.repo.UpdateMedia(ctx, mediaModel)
	return err
}

func (r *PostgresMediaRepository) Delete(ctx context.Context, id uuid.UUID) error {
	mediaModel := model.Media{ID: id}
	_, err := r.repo.DeleteMedia(ctx, mediaModel)
	return err
}

func (r *PostgresMediaRepository) Count(ctx context.Context) (int64, error) {
	// This would need to be implemented based on your specific requirements
	// For now, returning 0 as the existing repository doesn't have this method
	return 0, nil
}

func (r *PostgresMediaRepository) CountByUserID(ctx context.Context, userID uuid.UUID) (int64, error) {
	// This would need to be implemented based on your specific requirements
	// For now, returning 0 as the existing repository doesn't have this method
	return 0, nil
}
